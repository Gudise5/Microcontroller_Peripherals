
GPIO_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003e0  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d8  080003d8  000013e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003d8  080003d8  000013e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003d8  080003e0  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d8  080003d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000372  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000013b  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000018c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a74  00000000  00000000  00001951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000667  00000000  00000000  0001a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1ae  00000000  00000000  0001aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5bda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  000a5c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000a5cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003c0 	.word	0x080003c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003c0 	.word	0x080003c0

08000204 <gpio_init>:
#include "stm32f4xx.h"

void gpio_init(void) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
    // Enable GPIOA, GPIOC clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 800020a:	4b2a      	ldr	r3, [pc, #168]	@ (80002b4 <gpio_init+0xb0>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020e:	4a29      	ldr	r2, [pc, #164]	@ (80002b4 <gpio_init+0xb0>)
 8000210:	f043 0305 	orr.w	r3, r3, #5
 8000214:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA5 as output, PA9/PA10 as AF, PC13 as input
    GPIOA->MODER &= ~(3 << (5 * 2));           // Clear mode
 8000216:	4b28      	ldr	r3, [pc, #160]	@ (80002b8 <gpio_init+0xb4>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a27      	ldr	r2, [pc, #156]	@ (80002b8 <gpio_init+0xb4>)
 800021c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000220:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (5 * 2));            // PA5 Output
 8000222:	4b25      	ldr	r3, [pc, #148]	@ (80002b8 <gpio_init+0xb4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a24      	ldr	r2, [pc, #144]	@ (80002b8 <gpio_init+0xb4>)
 8000228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800022c:	6013      	str	r3, [r2, #0]

    GPIOA->MODER &= ~((3 << (9*2)) | (3 << (10*2)));  // Clear PA9, PA10
 800022e:	4b22      	ldr	r3, [pc, #136]	@ (80002b8 <gpio_init+0xb4>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a21      	ldr	r2, [pc, #132]	@ (80002b8 <gpio_init+0xb4>)
 8000234:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8000238:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (9*2)) | (2 << (10*2));     // AF mode
 800023a:	4b1f      	ldr	r3, [pc, #124]	@ (80002b8 <gpio_init+0xb4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a1e      	ldr	r2, [pc, #120]	@ (80002b8 <gpio_init+0xb4>)
 8000240:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000244:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(3 << (13 * 2));          // PC13 Input
 8000246:	4b1d      	ldr	r3, [pc, #116]	@ (80002bc <gpio_init+0xb8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a1c      	ldr	r2, [pc, #112]	@ (80002bc <gpio_init+0xb8>)
 800024c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000250:	6013      	str	r3, [r2, #0]

    // OTYPER: Push-pull for PA5
    GPIOA->OTYPER &= ~(1 << 5);
 8000252:	4b19      	ldr	r3, [pc, #100]	@ (80002b8 <gpio_init+0xb4>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a18      	ldr	r2, [pc, #96]	@ (80002b8 <gpio_init+0xb4>)
 8000258:	f023 0320 	bic.w	r3, r3, #32
 800025c:	6053      	str	r3, [r2, #4]

    // OSPEEDR: High speed for PA5
    GPIOA->OSPEEDR |= (3 << (5 * 2));
 800025e:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <gpio_init+0xb4>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	4a15      	ldr	r2, [pc, #84]	@ (80002b8 <gpio_init+0xb4>)
 8000264:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000268:	6093      	str	r3, [r2, #8]

    // PUPDR: Pull-up for PC13
    GPIOC->PUPDR &= ~(3 << (13 * 2));
 800026a:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <gpio_init+0xb8>)
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	4a13      	ldr	r2, [pc, #76]	@ (80002bc <gpio_init+0xb8>)
 8000270:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000274:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << (13 * 2));
 8000276:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <gpio_init+0xb8>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	4a10      	ldr	r2, [pc, #64]	@ (80002bc <gpio_init+0xb8>)
 800027c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000280:	60d3      	str	r3, [r2, #12]

    // AFR: Set PA9 and PA10 to AF7 (USART1)
    GPIOA->AFR[1] |= (7 << ((9 - 8) * 4)) | (7 << ((10 - 8) * 4));
 8000282:	4b0d      	ldr	r3, [pc, #52]	@ (80002b8 <gpio_init+0xb4>)
 8000284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000286:	4a0c      	ldr	r2, [pc, #48]	@ (80002b8 <gpio_init+0xb4>)
 8000288:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800028c:	6253      	str	r3, [r2, #36]	@ 0x24

    // Lock PA5
    GPIOA->LCKR = (1 << 16) | (1 << 5);
 800028e:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <gpio_init+0xb4>)
 8000290:	4a0b      	ldr	r2, [pc, #44]	@ (80002c0 <gpio_init+0xbc>)
 8000292:	61da      	str	r2, [r3, #28]
    GPIOA->LCKR = (1 << 5);
 8000294:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <gpio_init+0xb4>)
 8000296:	2220      	movs	r2, #32
 8000298:	61da      	str	r2, [r3, #28]
    GPIOA->LCKR = (1 << 16) | (1 << 5);
 800029a:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <gpio_init+0xb4>)
 800029c:	4a08      	ldr	r2, [pc, #32]	@ (80002c0 <gpio_init+0xbc>)
 800029e:	61da      	str	r2, [r3, #28]
    uint32_t temp = GPIOA->LCKR; // Dummy read to complete lock
 80002a0:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <gpio_init+0xb4>)
 80002a2:	69db      	ldr	r3, [r3, #28]
 80002a4:	607b      	str	r3, [r7, #4]
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000
 80002bc:	40020800 	.word	0x40020800
 80002c0:	00010020 	.word	0x00010020

080002c4 <delay>:

void delay(void) {
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
    for (int i = 0; i < 500000; i++);
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	e002      	b.n	80002d6 <delay+0x12>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <delay+0x28>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	ddf8      	ble.n	80002d0 <delay+0xc>
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	0007a11f 	.word	0x0007a11f

080002f0 <main>:

int main(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
    gpio_init();
 80002f4:	f7ff ff86 	bl	8000204 <gpio_init>

    while (1) {
        // If button is pressed (PC13 = 0)
        if (!(GPIOC->IDR & (1 << 13))) {
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <main+0x2c>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000300:	2b00      	cmp	r3, #0
 8000302:	d103      	bne.n	800030c <main+0x1c>
            GPIOA->BSRR = (1 << 5);  // Set PA5 (LED ON)
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <main+0x30>)
 8000306:	2220      	movs	r2, #32
 8000308:	619a      	str	r2, [r3, #24]
 800030a:	e003      	b.n	8000314 <main+0x24>
        } else {
            GPIOA->BSRR = (1 << (5 + 16));  // Reset PA5 (LED OFF)
 800030c:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <main+0x30>)
 800030e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000312:	619a      	str	r2, [r3, #24]
        }

        delay();
 8000314:	f7ff ffd6 	bl	80002c4 <delay>
        if (!(GPIOC->IDR & (1 << 13))) {
 8000318:	e7ee      	b.n	80002f8 <main+0x8>
 800031a:	bf00      	nop
 800031c:	40020800 	.word	0x40020800
 8000320:	40020000 	.word	0x40020000

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	@ (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	@ (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ffcb 	bl	80002f0 <main>

0800035a <LoopForever>:

LoopForever:
  b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	2000001c 	.word	0x2000001c

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4d0d      	ldr	r5, [pc, #52]	@ (80003b0 <__libc_init_array+0x38>)
 800037c:	4c0d      	ldr	r4, [pc, #52]	@ (80003b4 <__libc_init_array+0x3c>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	2600      	movs	r6, #0
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	4d0b      	ldr	r5, [pc, #44]	@ (80003b8 <__libc_init_array+0x40>)
 800038a:	4c0c      	ldr	r4, [pc, #48]	@ (80003bc <__libc_init_array+0x44>)
 800038c:	f000 f818 	bl	80003c0 <_init>
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	2600      	movs	r6, #0
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
